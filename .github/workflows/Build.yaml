name: Build and Test

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
      - name: Cache Gradle and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

  checks:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [build_logic, spotless, dependency_guard]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Run ${{ matrix.check }}
        run: |
          if [ "${{ matrix.check }}" = "build_logic" ]; then
            ./gradlew check -p build-logic
          elif [ "${{ matrix.check }}" = "spotless" ]; then
            ./gradlew spotlessCheck --init-script gradle/init.gradle.kts --no-configuration-cache
          elif [ "${{ matrix.check }}" = "dependency_guard" ]; then
            ./gradlew dependencyGuard
          fi

  tests_and_lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Run tests and lint
        run: |
          ./gradlew testDemoDebug :lint:test :app:lintProdRelease :lint:lint
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-and-lint-reports
          path: |
            **/build/reports/lint-results-*.html
            **/build/test-results/test*UnitTest/**.xml

  screenshot_tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Run screenshot tests
        id: screenshotsverify
        continue-on-error: true
        run: ./gradlew verifyRoborazziDemoDebug
      - name: Generate new screenshots if verification failed
        id: screenshotsrecord
        if: steps.screenshotsverify.outcome == 'failure' && github.event_name == 'pull_request'
        run: ./gradlew recordRoborazziDemoDebug
      - name: Push new screenshots if available
        uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.screenshotsrecord.outcome == 'success'
        with:
          file_pattern: '*/*.png'
          disable_globbing: true
          commit_message: "ðŸ¤– Updates screenshots"

  build:
    needs: [checks, tests_and_lint, screenshot_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Build APKs
        run: |
          ./gradlew :app:assembleDebug :benchmarks:assemble 
            -x pixel6Api33ProdNonMinifiedReleaseAndroidTest 
            -x pixel6Api33DemoNonMinifiedReleaseAndroidTest 
            -x collectDemoNonMinifiedReleaseBaselineProfile 
            -x collectProdNonMinifiedReleaseBaselineProfile
      - name: Check badging
        run: ./gradlew :app:checkProdReleaseBadging
      - name: Upload to Maestro Cloud
        uses: mobile-dev-inc/action-maestro-cloud@v1
        with:
          api-key: ${{ secrets.MAESTRO_CLOUD_API_KEY }}
          app-file: '**/build/outputs/apk/**/*.apk'
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: APKs
          path: '**/build/outputs/apk/**/*.apk'